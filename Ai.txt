Sure, I can adjust the script to handle the comment form submission without forwarding to `comment.php`. The change will streamline the process to add a comment on the client side directly while including the delete button.

Here's your updated script:

```javascript
$(document).ready(function() {
    // Handling the comment form submission
    $('#comment-form').on('submit', function(e) {
        e.preventDefault();
        var form = $(this);
        var commentText = form.find('input[name="comment_text"]').val().trim();
        
        if (commentText === '') {
            alert('Comment cannot be empty');
            return;
        }

        // Assuming you have logic here for adding comment to the server
        
        // Dummy comment ID - replace with actual ID from server
        var commentID = new Date().getTime();

        var newComment = $('<div>', { class: 'comment', 'data-id': commentID }).text(commentText);
        newComment.append('<form class="delete-form" method="post"><button type="submit">Delete</button></form>');
        
        form.closest('.post').find('.comments').append(newComment);
        form.find('input[name="comment_text"]').val('');
    });

    // Handling the delete form submission
    $(document).on('submit', '.delete-form', function(e) {
        e.preventDefault();
        var form = $(this);

        // Assuming AJAX call for deleting the comment from the server
        $.ajax({
            type: 'POST',
            url: 'delete_post.php',
            data: { comment_id: form.closest('.comment').data('id') },
            success: function(response) {
                if (response === 'Comment deleted successfully') {
                    form.closest('.comment').remove();
                } else {
                    alert(response);
                }
            },
            error: function(xhr, status, error) {
                console.log('Error deleting comment:', xhr.responseText);
                alert('Error deleting comment');
            }
        });
    });

    // Show image in fullscreen
    $(document).on('click', '.post-image img', function() {
        var src = $(this).attr('src');
        $('#fullscreen-img').attr('src', src);
        $('.fullscreen-overlay').fadeIn();
    });

    // Set image for fullscreen when profile picture or cover photo is clicked
    $(document).on('click', '#profile-picture, #cover-photo', function() {
        var src = $(this).attr('src');
        $('#fullscreen-img').attr('src', src);
    });
});
```

### Key Changes:
1. Removed the AJAX call to `comment.php`.
2. Added a dummy comment ID using the current timestamp for demonstration purposes. Replace this with the actual ID received from your server logic.
3. Added a check to ensure the comment isn't empty before adding it to the post.
4. Maintained the existing logic to show a delete button instantly when a comment is added.

This way, you handle everything on the client side for a smooth user experience.
